<!DOCTYPE html>
<html lang="en">
<head>
  <meta charset="UTF-8">
  <meta name="viewport" content="width=device-width, initial-scale=1.0">
  <title>Photo Viewer</title>
  <style>
    body {
      margin: 0;
      padding: 0;
      background-color: #000;
      display: flex;
      flex-direction: column;
      justify-content: center;
      align-items: center;
      min-height: 100vh;
      font-family: Arial, sans-serif;
    }

    .photo-container {
      max-width: 100vw;
      max-height: 85vh;
      display: flex;
      justify-content: center;
      align-items: center;
      flex-grow: 1;
    }

    .photo {
      max-width: 100%;
      max-height: 100%;
      object-fit: contain;
      border-radius: 8px;
    }

    .no-photo {
      color: white;
      text-align: center;
      font-size: 18px;
    }

    .loading {
      color: white;
      text-align: center;
      font-size: 16px;
    }

    .controls {
      padding: 20px;
      text-align: center;
    }

    .tts-button {
      background-color: #4CAF50;
      color: white;
      border: none;
      padding: 12px 24px;
      font-size: 16px;
      border-radius: 6px;
      cursor: pointer;
      transition: background-color 0.3s;
    }

    .tts-button:hover {
      background-color: #45a049;
    }

    .tts-button:disabled {
      background-color: #666;
      cursor: not-allowed;
    }

    .status-message {
      color: white;
      margin-top: 10px;
      font-size: 14px;
    }

    .error {
      color: #ff6b6b;
    }

    .success {
      color: #51cf66;
    }
  </style>
</head>
<body>
  <div class="photo-container">
    <div id="content" class="loading">Loading latest photo...</div>
  </div>

  <div class="controls">
    <button id="ttsButton" class="tts-button" onclick="playTTS()">
      ðŸ”Š Play TTS Instructions
    </button>
    <button id="uploadTestButton" class="tts-button" onclick="testUpload()" style="margin-left: 10px; background-color: #2196F3;">
      ðŸ“¤ Test TTS + Upload
    </button>
    <div id="statusMessage" class="status-message"></div>
  </div>

  <script>
    let currentRequestId = null;

    /**
     * Check for new photos and update display
     */
    async function checkForNewPhoto() {
      try {
        const response = await fetch('/api/latest-photo');

        if (response.status === 404) {
          // No photo available
          document.getElementById('content').innerHTML =
            '<div class="no-photo">No photos taken yet. Take a photo using your Mentra Live by pressing the right button!</div>';
          return;
        }

        if (!response.ok) {
          throw new Error('Failed to fetch photo info');
        }

        const photoInfo = await response.json();

        // Check if this is a new photo
        if (photoInfo.requestId !== currentRequestId) {
          currentRequestId = photoInfo.requestId;

          // Update the display with new photo
          document.getElementById('content').innerHTML =
            '<img class="photo" src="/api/photo/' + photoInfo.requestId + '" alt="Latest Photo" />';
        }
      } catch (error) {
        console.error('Error checking for new photo:', error);
        document.getElementById('content').innerHTML =
          '<div class="no-photo">Error loading photo. Please refresh the page.</div>';
      }
    }

    /**
     * Play TTS message on the glasses
     */
    async function playTTS() {
      const button = document.getElementById('ttsButton');
      const statusMessage = document.getElementById('statusMessage');
      
      // Disable button and show loading
      button.disabled = true;
      button.textContent = 'ðŸ”Š Playing...';
      statusMessage.textContent = 'Sending TTS to glasses...';
      statusMessage.className = 'status-message';

      try {
        const response = await fetch('/api/tts', {
          method: 'POST',
          headers: {
            'Content-Type': 'application/json',
          },
          body: JSON.stringify({
            text: 'Hold the image still for 5 seconds'
          })
        });

        const result = await response.json();

        if (response.ok) {
          statusMessage.textContent = 'TTS played successfully on glasses!';
          statusMessage.className = 'status-message success';
        } else {
          statusMessage.textContent = `Error: ${result.message || result.error}`;
          statusMessage.className = 'status-message error';
        }
      } catch (error) {
        console.error('Error playing TTS:', error);
        statusMessage.textContent = 'Failed to play TTS. Please try again.';
        statusMessage.className = 'status-message error';
      } finally {
        // Re-enable button
        button.disabled = false;
        button.textContent = 'ðŸ”Š Play TTS Instructions';
        
        // Clear status message after 3 seconds
        setTimeout(() => {
          statusMessage.textContent = '';
        }, 3000);
      }
    }

    /**
     * Test TTS generation and upload to UploadThing
     */
    async function testUpload() {
      const button = document.getElementById('uploadTestButton');
      const statusMessage = document.getElementById('statusMessage');
      
      // Disable button and show loading
      button.disabled = true;
      button.textContent = 'ðŸ“¤ Uploading...';
      statusMessage.textContent = 'Generating TTS and uploading to UploadThing...';
      statusMessage.className = 'status-message';

      try {
        const response = await fetch('/api/tts/test-upload', {
          method: 'POST',
          headers: {
            'Content-Type': 'application/json',
          }
        });

        const result = await response.json();

        if (response.ok) {
          statusMessage.textContent = 'TTS generated and uploaded to UploadThing successfully!';
          statusMessage.className = 'status-message success';
        } else {
          statusMessage.textContent = `Error: ${result.message || result.error}`;
          statusMessage.className = 'status-message error';
        }
      } catch (error) {
        console.error('Error testing upload:', error);
        statusMessage.textContent = 'Failed to generate and upload TTS. Please try again.';
        statusMessage.className = 'status-message error';
      } finally {
        // Re-enable button
        button.disabled = false;
        button.textContent = 'ðŸ“¤ Test TTS + Upload';
        
        // Clear status message after 5 seconds (longer for upload success)
        setTimeout(() => {
          statusMessage.textContent = '';
        }, 5000);
      }
    }

    // Check for new photos every 500ms (twice per second)
    checkForNewPhoto(); // Initial check
    setInterval(checkForNewPhoto, 500);
  </script>
</body>
</html>